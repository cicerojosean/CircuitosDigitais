// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2018 12:46:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alarme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alarme_vlg_sample_tst(
	clock1,
	config,
	enable1,
	Horas1,
	Horas2,
	Minutos1,
	Minutos2,
	set,
	strt,
	zerar1,
	sampler_tx
);
input  clock1;
input  config;
input  enable1;
input [3:0] Horas1;
input [3:0] Horas2;
input [3:0] Minutos1;
input [3:0] Minutos2;
input  set;
input  strt;
input  zerar1;
output sampler_tx;

reg sample;
time current_time;
always @(clock1 or config or enable1 or Horas1 or Horas2 or Minutos1 or Minutos2 or set or strt or zerar1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alarme_vlg_check_tst (
	taNaHora,
	sampler_rx
);
input  taNaHora;
input sampler_rx;

reg  taNaHora_expected;

reg  taNaHora_prev;

reg  taNaHora_expected_prev;

reg  last_taNaHora_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	taNaHora_prev = taNaHora;
end

// update expected /o prevs

always @(trigger)
begin
	taNaHora_expected_prev = taNaHora_expected;
end



// expected taNaHora
initial
begin
	taNaHora_expected = 1'bX;
end 
// generate trigger
always @(taNaHora_expected or taNaHora)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected taNaHora = %b | ",taNaHora_expected_prev);
	$display("| real taNaHora = %b | ",taNaHora_prev);
`endif
	if (
		( taNaHora_expected_prev !== 1'bx ) && ( taNaHora_prev !== taNaHora_expected_prev )
		&& ((taNaHora_expected_prev !== last_taNaHora_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port taNaHora :: @time = %t",  $realtime);
		$display ("     Expected value = %b", taNaHora_expected_prev);
		$display ("     Real value = %b", taNaHora_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_taNaHora_exp = taNaHora_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alarme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock1;
reg config;
reg enable1;
reg [3:0] Horas1;
reg [3:0] Horas2;
reg [3:0] Minutos1;
reg [3:0] Minutos2;
reg set;
reg strt;
reg zerar1;
// wires                                               
wire taNaHora;

wire sampler;                             

// assign statements (if any)                          
alarme i1 (
// port map - connection between master ports and signals/registers   
	.clock1(clock1),
	.\config (config),
	.enable1(enable1),
	.Horas1(Horas1),
	.Horas2(Horas2),
	.Minutos1(Minutos1),
	.Minutos2(Minutos2),
	.set(set),
	.strt(strt),
	.taNaHora(taNaHora),
	.zerar1(zerar1)
);

// clock1
always
begin
	clock1 = 1'b0;
	clock1 = #2500 1'b1;
	#2500;
end 

// config
initial
begin
	config = 1'b0;
end 

// enable1
initial
begin
	enable1 = 1'b1;
end 
// Horas1[ 3 ]
initial
begin
	Horas1[3] = 1'b0;
end 
// Horas1[ 2 ]
initial
begin
	Horas1[2] = 1'b0;
end 
// Horas1[ 1 ]
initial
begin
	Horas1[1] = 1'b0;
end 
// Horas1[ 0 ]
initial
begin
	Horas1[0] = 1'b1;
	Horas1[0] = #120000 1'b0;
end 
// Horas2[ 3 ]
initial
begin
	Horas2[3] = 1'b0;
end 
// Horas2[ 2 ]
initial
begin
	Horas2[2] = 1'b0;
end 
// Horas2[ 1 ]
initial
begin
	Horas2[1] = 1'b0;
end 
// Horas2[ 0 ]
initial
begin
	Horas2[0] = 1'b0;
end 
// Minutos1[ 3 ]
initial
begin
	Minutos1[3] = 1'b0;
end 
// Minutos1[ 2 ]
initial
begin
	Minutos1[2] = 1'b0;
end 
// Minutos1[ 1 ]
initial
begin
	Minutos1[1] = 1'b0;
end 
// Minutos1[ 0 ]
initial
begin
	Minutos1[0] = 1'b0;
end 
// Minutos2[ 3 ]
initial
begin
	Minutos2[3] = 1'b0;
end 
// Minutos2[ 2 ]
initial
begin
	Minutos2[2] = 1'b0;
end 
// Minutos2[ 1 ]
initial
begin
	Minutos2[1] = 1'b0;
end 
// Minutos2[ 0 ]
initial
begin
	Minutos2[0] = 1'b0;
end 

// set
initial
begin
	set = 1'b0;
end 

// strt
initial
begin
	strt = 1'b0;
end 

// zerar1
initial
begin
	zerar1 = 1'b1;
end 

alarme_vlg_sample_tst tb_sample (
	.clock1(clock1),
	.config(config),
	.enable1(enable1),
	.Horas1(Horas1),
	.Horas2(Horas2),
	.Minutos1(Minutos1),
	.Minutos2(Minutos2),
	.set(set),
	.strt(strt),
	.zerar1(zerar1),
	.sampler_tx(sampler)
);

alarme_vlg_check_tst tb_out(
	.taNaHora(taNaHora),
	.sampler_rx(sampler)
);
endmodule

